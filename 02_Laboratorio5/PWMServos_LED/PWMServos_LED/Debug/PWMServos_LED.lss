
PWMServos_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000059c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a2  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e3  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d5  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000024b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9e:	0c 94 cc 02 	jmp	0x598	; 0x598 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
void setupADC(void);

//INTERRUPCIONES

//ADC
ISR(ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	valoradc = ADCH; // Almacenar valor
  b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	ADCSRA |= (1<<ADIF); // Apagar bandera
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	80 83       	st	Z, r24
	if (servo_a_modificar == 1){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	51 f4       	brne	.+20     	; 0xe4 <__vector_21+0x3e>
		servo_a_modificar = 2;
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		//Remux ADC6
		ADMUX = 0; //Limpiar multiplexado
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1); //Vcc ref | Just. Izq. | Mux ADC6	
  dc:	80 81       	ld	r24, Z
  de:	86 66       	ori	r24, 0x66	; 102
  e0:	80 83       	st	Z, r24
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <__vector_21+0x50>
	}
	else
	{
		servo_a_modificar = 1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		//Remux ADC7
		ADMUX = 0; //Limpiar multiplexado
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
  f0:	80 81       	ld	r24, Z
  f2:	87 66       	ori	r24, 0x67	; 103
  f4:	80 83       	st	Z, r24
	}
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <setup>:
	//Entradas
	// No hay digitales, solo ADC
	
	//Salidas
	//PB1 va al Servo 1 (OC1A)
	DDRB = 0;
 106:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB2)|(1<<DDB1);
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	08 95       	ret

00000110 <setupADC>:
	//Otros servos
}

void setupADC(void){
	ADMUX = 0;
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
 116:	80 81       	ld	r24, Z
 118:	87 66       	ori	r24, 0x67	; 103
 11a:	80 83       	st	Z, r24
	ADCSRA = 0;
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
 122:	80 81       	ld	r24, Z
 124:	8f 60       	ori	r24, 0x0F	; 15
 126:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
 128:	80 81       	ld	r24, Z
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <main>:
}

//PRINCIPAL
int main(void)
{
	cli();
 130:	f8 94       	cli
	setup();
 132:	0e 94 83 00 	call	0x106	; 0x106 <setup>
	setupADC();
 136:	0e 94 88 00 	call	0x110	; 0x110 <setupADC>
	setupPWM1();
 13a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <setupPWM1>
	sei();
 13e:	78 94       	sei
	
	actualizar_servo(0,1); //Primer inicio de Servo1
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 13 01 	call	0x226	; 0x226 <actualizar_servo>
	actualizar_servo(0,2); //Primer inicio de Servo2
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 13 01 	call	0x226	; 0x226 <actualizar_servo>
	ADCSRA |= (1<<ADSC); //Primer inicio de ADC
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x32>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x38>
 168:	00 00       	nop

	while (1)
	{
		_delay_ms(10);
		actualizar_servo(valoradc, 1);
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 13 01 	call	0x226	; 0x226 <actualizar_servo>
		ADCSRA |= (1<<ADSC); //Volver a iniciar
 176:	ca e7       	ldi	r28, 0x7A	; 122
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	88 81       	ld	r24, Y
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	88 83       	st	Y, r24
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9c e9       	ldi	r25, 0x9C	; 156
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x54>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x5a>
 18a:	00 00       	nop
		_delay_ms(10);
		actualizar_servo(valoradc, 2);
 18c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 13 01 	call	0x226	; 0x226 <actualizar_servo>
		ADCSRA |= (1<<ADSC); //Volver a iniciar
 198:	88 81       	ld	r24, Y
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	88 83       	st	Y, r24
 19e:	df cf       	rjmp	.-66     	; 0x15e <main+0x2e>

000001a0 <actualizar_pwm>:
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <listo_actualizar_pwm>
	while (listo_actualizar_pwm != 0){
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <actualizar_pwm+0x20>
		//El valor del pulso depende del leído en ADCH
		//El OCR1 modificado depende de NumServo
		if (NumServo==1){
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <actualizar_pwm+0x14>
			OCR1AH = (i & 0xFF00) >> 8;
 1ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = (i & 0x00FF);
 1b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		if(NumServo==2){
 1b4:	62 30       	cpi	r22, 0x02	; 2
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <actualizar_pwm+0x20>
			OCR1BH = (i & 0xFF00) >> 8;
 1b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
			OCR1BL = (i & 0x00FF);
 1bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
	while (listo_actualizar_pwm != 0){
 1c0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <listo_actualizar_pwm>
 1c4:	21 11       	cpse	r18, r1
 1c6:	f0 cf       	rjmp	.-32     	; 0x1a8 <actualizar_pwm+0x8>
		if(NumServo==2){
			OCR1BH = (i & 0xFF00) >> 8;
			OCR1BL = (i & 0x00FF);
		}
	}
}
 1c8:	08 95       	ret

000001ca <__vector_13>:

#include "PWM1.h"

uint8_t listo_actualizar_pwm = 0;

ISR(TIMER1_OVF_vect){
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
	//Regresa a los 20ms
	listo_actualizar_pwm = 0;
 1d4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <listo_actualizar_pwm>
}
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <setupPWM1>:


void setupPWM1(void){
	//Interrupciones
	TIMSK1 = 0;
 1e2:	ef e6       	ldi	r30, 0x6F	; 111
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	10 82       	st	Z, r1
	TIMSK1 = (1<<TOIE1); //Overflow
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24
	
	//Top en ICR1
	ICR1H = (PWMTOP & 0xFF00) >> 8;
 1ec:	8c e9       	ldi	r24, 0x9C	; 156
 1ee:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWMTOP & 0x00FF);
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//Inicializar servo al minimo
	OCR1AH = (SERVOMIN & 0xFF00) >> 8;
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (SERVOMIN & 0x00FF);
 1fe:	8f ec       	ldi	r24, 0xCF	; 207
 200:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR1BH = (SERVOMIN & 0xFF00) >> 8;
 204:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
	OCR1BL = (SERVOMIN & 0x00FF);
 208:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//Forma, modo, prescaler
	TCCR1A = 0;
 20c:	a0 e8       	ldi	r26, 0x80	; 128
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	1c 92       	st	X, r1
	TCCR1B = 0;
 212:	e1 e8       	ldi	r30, 0x81	; 129
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
 218:	8c 91       	ld	r24, X
 21a:	82 6a       	ori	r24, 0xA2	; 162
 21c:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
 21e:	80 81       	ld	r24, Z
 220:	8a 61       	ori	r24, 0x1A	; 26
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <actualizar_servo>:
			OCR1BL = (i & 0x00FF);
		}
	}
}

void actualizar_servo(uint16_t adchleido, uint8_t servo_a_modificar){
 226:	cf 93       	push	r28
 228:	c6 2f       	mov	r28, r22
	//Conversión de lectura de ADC a pulso en PWM
	float razon = (float)adchleido/(float)256;
 22a:	bc 01       	movw	r22, r24
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__floatunsisf>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5b e3       	ldi	r21, 0x3B	; 59
 23c:	0e 94 5f 02 	call	0x4be	; 0x4be <__mulsf3>
	razon = (((float)SERVOMAX - (float)SERVOMIN)*razon) + (float)SERVOMIN;
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	4a ef       	ldi	r20, 0xFA	; 250
 246:	54 e4       	ldi	r21, 0x44	; 68
 248:	0e 94 5f 02 	call	0x4be	; 0x4be <__mulsf3>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 ee       	ldi	r19, 0xE0	; 224
 250:	49 ef       	ldi	r20, 0xF9	; 249
 252:	54 e4       	ldi	r21, 0x44	; 68
 254:	0e 94 36 01 	call	0x26c	; 0x26c <__addsf3>
	uint16_t valorservo = (uint16_t)razon;
 258:	0e 94 a2 01 	call	0x344	; 0x344 <__fixunssfsi>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
	actualizar_pwm(valorservo, servo_a_modificar);
 260:	6c 2f       	mov	r22, r28
 262:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <actualizar_pwm>
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <__subsf3>:
 26a:	50 58       	subi	r21, 0x80	; 128

0000026c <__addsf3>:
 26c:	bb 27       	eor	r27, r27
 26e:	aa 27       	eor	r26, r26
 270:	0e 94 4d 01 	call	0x29a	; 0x29a <__addsf3x>
 274:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_round>
 278:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscA>
 27c:	38 f0       	brcs	.+14     	; 0x28c <__addsf3+0x20>
 27e:	0e 94 1e 02 	call	0x43c	; 0x43c <__fp_pscB>
 282:	20 f0       	brcs	.+8      	; 0x28c <__addsf3+0x20>
 284:	39 f4       	brne	.+14     	; 0x294 <__addsf3+0x28>
 286:	9f 3f       	cpi	r25, 0xFF	; 255
 288:	19 f4       	brne	.+6      	; 0x290 <__addsf3+0x24>
 28a:	26 f4       	brtc	.+8      	; 0x294 <__addsf3+0x28>
 28c:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_nan>
 290:	0e f4       	brtc	.+2      	; 0x294 <__addsf3+0x28>
 292:	e0 95       	com	r30
 294:	e7 fb       	bst	r30, 7
 296:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_inf>

0000029a <__addsf3x>:
 29a:	e9 2f       	mov	r30, r25
 29c:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_split3>
 2a0:	58 f3       	brcs	.-42     	; 0x278 <__addsf3+0xc>
 2a2:	ba 17       	cp	r27, r26
 2a4:	62 07       	cpc	r22, r18
 2a6:	73 07       	cpc	r23, r19
 2a8:	84 07       	cpc	r24, r20
 2aa:	95 07       	cpc	r25, r21
 2ac:	20 f0       	brcs	.+8      	; 0x2b6 <__addsf3x+0x1c>
 2ae:	79 f4       	brne	.+30     	; 0x2ce <__addsf3x+0x34>
 2b0:	a6 f5       	brtc	.+104    	; 0x31a <__addsf3x+0x80>
 2b2:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_zero>
 2b6:	0e f4       	brtc	.+2      	; 0x2ba <__addsf3x+0x20>
 2b8:	e0 95       	com	r30
 2ba:	0b 2e       	mov	r0, r27
 2bc:	ba 2f       	mov	r27, r26
 2be:	a0 2d       	mov	r26, r0
 2c0:	0b 01       	movw	r0, r22
 2c2:	b9 01       	movw	r22, r18
 2c4:	90 01       	movw	r18, r0
 2c6:	0c 01       	movw	r0, r24
 2c8:	ca 01       	movw	r24, r20
 2ca:	a0 01       	movw	r20, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	ff 27       	eor	r31, r31
 2d0:	59 1b       	sub	r21, r25
 2d2:	99 f0       	breq	.+38     	; 0x2fa <__addsf3x+0x60>
 2d4:	59 3f       	cpi	r21, 0xF9	; 249
 2d6:	50 f4       	brcc	.+20     	; 0x2ec <__addsf3x+0x52>
 2d8:	50 3e       	cpi	r21, 0xE0	; 224
 2da:	68 f1       	brcs	.+90     	; 0x336 <__addsf3x+0x9c>
 2dc:	1a 16       	cp	r1, r26
 2de:	f0 40       	sbci	r31, 0x00	; 0
 2e0:	a2 2f       	mov	r26, r18
 2e2:	23 2f       	mov	r18, r19
 2e4:	34 2f       	mov	r19, r20
 2e6:	44 27       	eor	r20, r20
 2e8:	58 5f       	subi	r21, 0xF8	; 248
 2ea:	f3 cf       	rjmp	.-26     	; 0x2d2 <__addsf3x+0x38>
 2ec:	46 95       	lsr	r20
 2ee:	37 95       	ror	r19
 2f0:	27 95       	ror	r18
 2f2:	a7 95       	ror	r26
 2f4:	f0 40       	sbci	r31, 0x00	; 0
 2f6:	53 95       	inc	r21
 2f8:	c9 f7       	brne	.-14     	; 0x2ec <__addsf3x+0x52>
 2fa:	7e f4       	brtc	.+30     	; 0x31a <__addsf3x+0x80>
 2fc:	1f 16       	cp	r1, r31
 2fe:	ba 0b       	sbc	r27, r26
 300:	62 0b       	sbc	r22, r18
 302:	73 0b       	sbc	r23, r19
 304:	84 0b       	sbc	r24, r20
 306:	ba f0       	brmi	.+46     	; 0x336 <__addsf3x+0x9c>
 308:	91 50       	subi	r25, 0x01	; 1
 30a:	a1 f0       	breq	.+40     	; 0x334 <__addsf3x+0x9a>
 30c:	ff 0f       	add	r31, r31
 30e:	bb 1f       	adc	r27, r27
 310:	66 1f       	adc	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	88 1f       	adc	r24, r24
 316:	c2 f7       	brpl	.-16     	; 0x308 <__addsf3x+0x6e>
 318:	0e c0       	rjmp	.+28     	; 0x336 <__addsf3x+0x9c>
 31a:	ba 0f       	add	r27, r26
 31c:	62 1f       	adc	r22, r18
 31e:	73 1f       	adc	r23, r19
 320:	84 1f       	adc	r24, r20
 322:	48 f4       	brcc	.+18     	; 0x336 <__addsf3x+0x9c>
 324:	87 95       	ror	r24
 326:	77 95       	ror	r23
 328:	67 95       	ror	r22
 32a:	b7 95       	ror	r27
 32c:	f7 95       	ror	r31
 32e:	9e 3f       	cpi	r25, 0xFE	; 254
 330:	08 f0       	brcs	.+2      	; 0x334 <__addsf3x+0x9a>
 332:	b0 cf       	rjmp	.-160    	; 0x294 <__addsf3+0x28>
 334:	93 95       	inc	r25
 336:	88 0f       	add	r24, r24
 338:	08 f0       	brcs	.+2      	; 0x33c <__addsf3x+0xa2>
 33a:	99 27       	eor	r25, r25
 33c:	ee 0f       	add	r30, r30
 33e:	97 95       	ror	r25
 340:	87 95       	ror	r24
 342:	08 95       	ret

00000344 <__fixunssfsi>:
 344:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_splitA>
 348:	88 f0       	brcs	.+34     	; 0x36c <__fixunssfsi+0x28>
 34a:	9f 57       	subi	r25, 0x7F	; 127
 34c:	98 f0       	brcs	.+38     	; 0x374 <__fixunssfsi+0x30>
 34e:	b9 2f       	mov	r27, r25
 350:	99 27       	eor	r25, r25
 352:	b7 51       	subi	r27, 0x17	; 23
 354:	b0 f0       	brcs	.+44     	; 0x382 <__fixunssfsi+0x3e>
 356:	e1 f0       	breq	.+56     	; 0x390 <__fixunssfsi+0x4c>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	1a f0       	brmi	.+6      	; 0x368 <__fixunssfsi+0x24>
 362:	ba 95       	dec	r27
 364:	c9 f7       	brne	.-14     	; 0x358 <__fixunssfsi+0x14>
 366:	14 c0       	rjmp	.+40     	; 0x390 <__fixunssfsi+0x4c>
 368:	b1 30       	cpi	r27, 0x01	; 1
 36a:	91 f0       	breq	.+36     	; 0x390 <__fixunssfsi+0x4c>
 36c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_zero>
 370:	b1 e0       	ldi	r27, 0x01	; 1
 372:	08 95       	ret
 374:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_zero>
 378:	67 2f       	mov	r22, r23
 37a:	78 2f       	mov	r23, r24
 37c:	88 27       	eor	r24, r24
 37e:	b8 5f       	subi	r27, 0xF8	; 248
 380:	39 f0       	breq	.+14     	; 0x390 <__fixunssfsi+0x4c>
 382:	b9 3f       	cpi	r27, 0xF9	; 249
 384:	cc f3       	brlt	.-14     	; 0x378 <__fixunssfsi+0x34>
 386:	86 95       	lsr	r24
 388:	77 95       	ror	r23
 38a:	67 95       	ror	r22
 38c:	b3 95       	inc	r27
 38e:	d9 f7       	brne	.-10     	; 0x386 <__fixunssfsi+0x42>
 390:	3e f4       	brtc	.+14     	; 0x3a0 <__fixunssfsi+0x5c>
 392:	90 95       	com	r25
 394:	80 95       	com	r24
 396:	70 95       	com	r23
 398:	61 95       	neg	r22
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	8f 4f       	sbci	r24, 0xFF	; 255
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	08 95       	ret

000003a2 <__floatunsisf>:
 3a2:	e8 94       	clt
 3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <__floatsisf+0x12>

000003a6 <__floatsisf>:
 3a6:	97 fb       	bst	r25, 7
 3a8:	3e f4       	brtc	.+14     	; 0x3b8 <__floatsisf+0x12>
 3aa:	90 95       	com	r25
 3ac:	80 95       	com	r24
 3ae:	70 95       	com	r23
 3b0:	61 95       	neg	r22
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f 4f       	sbci	r24, 0xFF	; 255
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	99 23       	and	r25, r25
 3ba:	a9 f0       	breq	.+42     	; 0x3e6 <__floatsisf+0x40>
 3bc:	f9 2f       	mov	r31, r25
 3be:	96 e9       	ldi	r25, 0x96	; 150
 3c0:	bb 27       	eor	r27, r27
 3c2:	93 95       	inc	r25
 3c4:	f6 95       	lsr	r31
 3c6:	87 95       	ror	r24
 3c8:	77 95       	ror	r23
 3ca:	67 95       	ror	r22
 3cc:	b7 95       	ror	r27
 3ce:	f1 11       	cpse	r31, r1
 3d0:	f8 cf       	rjmp	.-16     	; 0x3c2 <__floatsisf+0x1c>
 3d2:	fa f4       	brpl	.+62     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3d4:	bb 0f       	add	r27, r27
 3d6:	11 f4       	brne	.+4      	; 0x3dc <__floatsisf+0x36>
 3d8:	60 ff       	sbrs	r22, 0
 3da:	1b c0       	rjmp	.+54     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3dc:	6f 5f       	subi	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	8f 4f       	sbci	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	16 c0       	rjmp	.+44     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3e6:	88 23       	and	r24, r24
 3e8:	11 f0       	breq	.+4      	; 0x3ee <__floatsisf+0x48>
 3ea:	96 e9       	ldi	r25, 0x96	; 150
 3ec:	11 c0       	rjmp	.+34     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ee:	77 23       	and	r23, r23
 3f0:	21 f0       	breq	.+8      	; 0x3fa <__floatsisf+0x54>
 3f2:	9e e8       	ldi	r25, 0x8E	; 142
 3f4:	87 2f       	mov	r24, r23
 3f6:	76 2f       	mov	r23, r22
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	66 23       	and	r22, r22
 3fc:	71 f0       	breq	.+28     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3fe:	96 e8       	ldi	r25, 0x86	; 134
 400:	86 2f       	mov	r24, r22
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	2a f0       	brmi	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 408:	9a 95       	dec	r25
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	da f7       	brpl	.-10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 412:	88 0f       	add	r24, r24
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	97 f9       	bld	r25, 7
 41a:	08 95       	ret

0000041c <__fp_inf>:
 41c:	97 f9       	bld	r25, 7
 41e:	9f 67       	ori	r25, 0x7F	; 127
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	08 95       	ret

00000428 <__fp_nan>:
 428:	9f ef       	ldi	r25, 0xFF	; 255
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	08 95       	ret

0000042e <__fp_pscA>:
 42e:	00 24       	eor	r0, r0
 430:	0a 94       	dec	r0
 432:	16 16       	cp	r1, r22
 434:	17 06       	cpc	r1, r23
 436:	18 06       	cpc	r1, r24
 438:	09 06       	cpc	r0, r25
 43a:	08 95       	ret

0000043c <__fp_pscB>:
 43c:	00 24       	eor	r0, r0
 43e:	0a 94       	dec	r0
 440:	12 16       	cp	r1, r18
 442:	13 06       	cpc	r1, r19
 444:	14 06       	cpc	r1, r20
 446:	05 06       	cpc	r0, r21
 448:	08 95       	ret

0000044a <__fp_round>:
 44a:	09 2e       	mov	r0, r25
 44c:	03 94       	inc	r0
 44e:	00 0c       	add	r0, r0
 450:	11 f4       	brne	.+4      	; 0x456 <__fp_round+0xc>
 452:	88 23       	and	r24, r24
 454:	52 f0       	brmi	.+20     	; 0x46a <__fp_round+0x20>
 456:	bb 0f       	add	r27, r27
 458:	40 f4       	brcc	.+16     	; 0x46a <__fp_round+0x20>
 45a:	bf 2b       	or	r27, r31
 45c:	11 f4       	brne	.+4      	; 0x462 <__fp_round+0x18>
 45e:	60 ff       	sbrs	r22, 0
 460:	04 c0       	rjmp	.+8      	; 0x46a <__fp_round+0x20>
 462:	6f 5f       	subi	r22, 0xFF	; 255
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__fp_split3>:
 46c:	57 fd       	sbrc	r21, 7
 46e:	90 58       	subi	r25, 0x80	; 128
 470:	44 0f       	add	r20, r20
 472:	55 1f       	adc	r21, r21
 474:	59 f0       	breq	.+22     	; 0x48c <__fp_splitA+0x10>
 476:	5f 3f       	cpi	r21, 0xFF	; 255
 478:	71 f0       	breq	.+28     	; 0x496 <__fp_splitA+0x1a>
 47a:	47 95       	ror	r20

0000047c <__fp_splitA>:
 47c:	88 0f       	add	r24, r24
 47e:	97 fb       	bst	r25, 7
 480:	99 1f       	adc	r25, r25
 482:	61 f0       	breq	.+24     	; 0x49c <__fp_splitA+0x20>
 484:	9f 3f       	cpi	r25, 0xFF	; 255
 486:	79 f0       	breq	.+30     	; 0x4a6 <__fp_splitA+0x2a>
 488:	87 95       	ror	r24
 48a:	08 95       	ret
 48c:	12 16       	cp	r1, r18
 48e:	13 06       	cpc	r1, r19
 490:	14 06       	cpc	r1, r20
 492:	55 1f       	adc	r21, r21
 494:	f2 cf       	rjmp	.-28     	; 0x47a <__fp_split3+0xe>
 496:	46 95       	lsr	r20
 498:	f1 df       	rcall	.-30     	; 0x47c <__fp_splitA>
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <__fp_splitA+0x30>
 49c:	16 16       	cp	r1, r22
 49e:	17 06       	cpc	r1, r23
 4a0:	18 06       	cpc	r1, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	f1 cf       	rjmp	.-30     	; 0x488 <__fp_splitA+0xc>
 4a6:	86 95       	lsr	r24
 4a8:	71 05       	cpc	r23, r1
 4aa:	61 05       	cpc	r22, r1
 4ac:	08 94       	sec
 4ae:	08 95       	ret

000004b0 <__fp_zero>:
 4b0:	e8 94       	clt

000004b2 <__fp_szero>:
 4b2:	bb 27       	eor	r27, r27
 4b4:	66 27       	eor	r22, r22
 4b6:	77 27       	eor	r23, r23
 4b8:	cb 01       	movw	r24, r22
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret

000004be <__mulsf3>:
 4be:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__mulsf3x>
 4c2:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_round>
 4c6:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscA>
 4ca:	38 f0       	brcs	.+14     	; 0x4da <__mulsf3+0x1c>
 4cc:	0e 94 1e 02 	call	0x43c	; 0x43c <__fp_pscB>
 4d0:	20 f0       	brcs	.+8      	; 0x4da <__mulsf3+0x1c>
 4d2:	95 23       	and	r25, r21
 4d4:	11 f0       	breq	.+4      	; 0x4da <__mulsf3+0x1c>
 4d6:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_inf>
 4da:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_nan>
 4de:	11 24       	eor	r1, r1
 4e0:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_szero>

000004e4 <__mulsf3x>:
 4e4:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_split3>
 4e8:	70 f3       	brcs	.-36     	; 0x4c6 <__mulsf3+0x8>

000004ea <__mulsf3_pse>:
 4ea:	95 9f       	mul	r25, r21
 4ec:	c1 f3       	breq	.-16     	; 0x4de <__mulsf3+0x20>
 4ee:	95 0f       	add	r25, r21
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	55 1f       	adc	r21, r21
 4f4:	62 9f       	mul	r22, r18
 4f6:	f0 01       	movw	r30, r0
 4f8:	72 9f       	mul	r23, r18
 4fa:	bb 27       	eor	r27, r27
 4fc:	f0 0d       	add	r31, r0
 4fe:	b1 1d       	adc	r27, r1
 500:	63 9f       	mul	r22, r19
 502:	aa 27       	eor	r26, r26
 504:	f0 0d       	add	r31, r0
 506:	b1 1d       	adc	r27, r1
 508:	aa 1f       	adc	r26, r26
 50a:	64 9f       	mul	r22, r20
 50c:	66 27       	eor	r22, r22
 50e:	b0 0d       	add	r27, r0
 510:	a1 1d       	adc	r26, r1
 512:	66 1f       	adc	r22, r22
 514:	82 9f       	mul	r24, r18
 516:	22 27       	eor	r18, r18
 518:	b0 0d       	add	r27, r0
 51a:	a1 1d       	adc	r26, r1
 51c:	62 1f       	adc	r22, r18
 51e:	73 9f       	mul	r23, r19
 520:	b0 0d       	add	r27, r0
 522:	a1 1d       	adc	r26, r1
 524:	62 1f       	adc	r22, r18
 526:	83 9f       	mul	r24, r19
 528:	a0 0d       	add	r26, r0
 52a:	61 1d       	adc	r22, r1
 52c:	22 1f       	adc	r18, r18
 52e:	74 9f       	mul	r23, r20
 530:	33 27       	eor	r19, r19
 532:	a0 0d       	add	r26, r0
 534:	61 1d       	adc	r22, r1
 536:	23 1f       	adc	r18, r19
 538:	84 9f       	mul	r24, r20
 53a:	60 0d       	add	r22, r0
 53c:	21 1d       	adc	r18, r1
 53e:	82 2f       	mov	r24, r18
 540:	76 2f       	mov	r23, r22
 542:	6a 2f       	mov	r22, r26
 544:	11 24       	eor	r1, r1
 546:	9f 57       	subi	r25, 0x7F	; 127
 548:	50 40       	sbci	r21, 0x00	; 0
 54a:	9a f0       	brmi	.+38     	; 0x572 <__mulsf3_pse+0x88>
 54c:	f1 f0       	breq	.+60     	; 0x58a <__mulsf3_pse+0xa0>
 54e:	88 23       	and	r24, r24
 550:	4a f0       	brmi	.+18     	; 0x564 <__mulsf3_pse+0x7a>
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	bb 1f       	adc	r27, r27
 558:	66 1f       	adc	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	91 50       	subi	r25, 0x01	; 1
 560:	50 40       	sbci	r21, 0x00	; 0
 562:	a9 f7       	brne	.-22     	; 0x54e <__mulsf3_pse+0x64>
 564:	9e 3f       	cpi	r25, 0xFE	; 254
 566:	51 05       	cpc	r21, r1
 568:	80 f0       	brcs	.+32     	; 0x58a <__mulsf3_pse+0xa0>
 56a:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_inf>
 56e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_szero>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	e4 f3       	brlt	.-8      	; 0x56e <__mulsf3_pse+0x84>
 576:	98 3e       	cpi	r25, 0xE8	; 232
 578:	d4 f3       	brlt	.-12     	; 0x56e <__mulsf3_pse+0x84>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b7 95       	ror	r27
 582:	f7 95       	ror	r31
 584:	e7 95       	ror	r30
 586:	9f 5f       	subi	r25, 0xFF	; 255
 588:	c1 f7       	brne	.-16     	; 0x57a <__mulsf3_pse+0x90>
 58a:	fe 2b       	or	r31, r30
 58c:	88 0f       	add	r24, r24
 58e:	91 1d       	adc	r25, r1
 590:	96 95       	lsr	r25
 592:	87 95       	ror	r24
 594:	97 f9       	bld	r25, 7
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
