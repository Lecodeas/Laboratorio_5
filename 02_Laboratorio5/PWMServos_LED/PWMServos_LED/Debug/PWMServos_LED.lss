
PWMServos_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000006ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae6  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065f  00000000  00000000  00001b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027c  00000000  00000000  000027e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  9e:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
void setupADC(void);

//INTERRUPCIONES

//ADC
ISR(ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	valoradc = ADCH; // Almacenar valor
  b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	ADCSRA |= (1<<ADIF); // Apagar bandera
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	80 83       	st	Z, r24
	if (modificar_secuencial == 1){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	51 f4       	brne	.+20     	; 0xe4 <__vector_21+0x3e>
		modificar_secuencial = 2;
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//Remux ADC6
		ADMUX = 0; //Limpiar multiplexado
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
		ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1); //Vcc ref | Just. Izq. | Mux ADC6	
  dc:	80 81       	ld	r24, Z
  de:	86 66       	ori	r24, 0x66	; 102
  e0:	80 83       	st	Z, r24
  e2:	15 c0       	rjmp	.+42     	; 0x10e <__vector_21+0x68>
	}
	else
	{
		if (modificar_secuencial == 2){
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	51 f4       	brne	.+20     	; 0xfc <__vector_21+0x56>
			modificar_secuencial = 3;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			//Remux ADC7
			ADMUX = 0; //Limpiar multiplexado
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
			ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
  f4:	80 81       	ld	r24, Z
  f6:	87 66       	ori	r24, 0x67	; 103
  f8:	80 83       	st	Z, r24
  fa:	09 c0       	rjmp	.+18     	; 0x10e <__vector_21+0x68>
		}
		else{
			modificar_secuencial = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			//Remux ADC5
			ADMUX = 0; //Limpiar multiplexado
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
			ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC5
 108:	80 81       	ld	r24, Z
 10a:	85 66       	ori	r24, 0x65	; 101
 10c:	80 83       	st	Z, r24
		}
	}
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <setup>:
	// No hay digitales, solo ADC
	
	//Salidas
	//PB1 va al Servo 1 (OC1A)
	//PB2 va al Servo 2 (OC1B)
	DDRB = 0;
 11e:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB2)|(1<<DDB1);
 120:	84 b1       	in	r24, 0x04	; 4
 122:	86 60       	ori	r24, 0x06	; 6
 124:	84 b9       	out	0x04, r24	; 4
	
	//PD6 va a LED (TIMER2)
	DDRD = 0;
 126:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<DDD6);
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	08 95       	ret

00000130 <setupADC>:
}

void setupADC(void){
	DIDR0 = 0;
 130:	ee e7       	ldi	r30, 0x7E	; 126
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
	DIDR0 = (1<<ADC5D); //Digital disable PC5
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	80 83       	st	Z, r24
	ADMUX = 0;
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
 140:	80 81       	ld	r24, Z
 142:	87 66       	ori	r24, 0x67	; 103
 144:	80 83       	st	Z, r24
	ADCSRA = 0;
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
 14c:	80 81       	ld	r24, Z
 14e:	8f 60       	ori	r24, 0x0F	; 15
 150:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <main>:
}

//PRINCIPAL
int main(void)
{
	cli();
 15a:	f8 94       	cli
	setup();
 15c:	0e 94 8f 00 	call	0x11e	; 0x11e <setup>
	setupADC();
 160:	0e 94 98 00 	call	0x130	; 0x130 <setupADC>
	setupPWM1();
 164:	0e 94 1a 01 	call	0x234	; 0x234 <setupPWM1>
	setupTIMER2();
 168:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setupTIMER2>
	sei();
 16c:	78 94       	sei
	
	actualizar_servo(0,1); //Primer inicio de Servo1
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 3c 01 	call	0x278	; 0x278 <actualizar_servo>
	actualizar_servo(0,2); //Primer inicio de Servo2
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 3c 01 	call	0x278	; 0x278 <actualizar_servo>
	ADCSRA |= (1<<ADSC); //Primer inicio de ADC
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f e7       	ldi	r18, 0x7F	; 127
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x34>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x3e>
 198:	00 00       	nop

	while (1)
	{
		_delay_ms(25);
		actualizar_servo(valoradc, 1);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1a0:	0e 94 3c 01 	call	0x278	; 0x278 <actualizar_servo>
		ADCSRA |= (1<<ADSC); //Volver a iniciar
 1a4:	ca e7       	ldi	r28, 0x7A	; 122
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	88 81       	ld	r24, Y
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	88 83       	st	Y, r24
 1ae:	2f e7       	ldi	r18, 0x7F	; 127
 1b0:	88 e3       	ldi	r24, 0x38	; 56
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x5a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x64>
 1be:	00 00       	nop
		_delay_ms(25);
		actualizar_servo(valoradc, 2);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c6:	0e 94 3c 01 	call	0x278	; 0x278 <actualizar_servo>
		ADCSRA |= (1<<ADSC); //Volver a iniciar
 1ca:	88 81       	ld	r24, Y
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	88 83       	st	Y, r24
 1d0:	2f e7       	ldi	r18, 0x7F	; 127
 1d2:	88 e3       	ldi	r24, 0x38	; 56
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0x7c>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x86>
 1e0:	00 00       	nop
		_delay_ms(25);
		actualizar_counterlimit(valoradc);
 1e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e6:	0e 94 90 01 	call	0x320	; 0x320 <actualizar_counterlimit>
		ADCSRA |= (1<<ADSC); //Volver a iniciar
 1ea:	88 81       	ld	r24, Y
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	88 83       	st	Y, r24
 1f0:	cb cf       	rjmp	.-106    	; 0x188 <main+0x2e>

000001f2 <actualizar_pwm>:
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <listo_actualizar_pwm>
	while (listo_actualizar_pwm != 0){
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <actualizar_pwm+0x20>
		//El valor del pulso depende del leído en ADCH
		//El OCR1 modificado depende de NumServo
		if (NumServo==1){
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	21 f4       	brne	.+8      	; 0x206 <actualizar_pwm+0x14>
			OCR1AH = (i & 0xFF00) >> 8;
 1fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
			OCR1AL = (i & 0x00FF);
 202:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		if(NumServo==2){
 206:	62 30       	cpi	r22, 0x02	; 2
 208:	21 f4       	brne	.+8      	; 0x212 <actualizar_pwm+0x20>
			OCR1BH = (i & 0xFF00) >> 8;
 20a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
			OCR1BL = (i & 0x00FF);
 20e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i, uint8_t NumServo){
	listo_actualizar_pwm = 1;
	while (listo_actualizar_pwm != 0){
 212:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <listo_actualizar_pwm>
 216:	21 11       	cpse	r18, r1
 218:	f0 cf       	rjmp	.-32     	; 0x1fa <actualizar_pwm+0x8>
		if(NumServo==2){
			OCR1BH = (i & 0xFF00) >> 8;
			OCR1BL = (i & 0x00FF);
		}
	}
}
 21a:	08 95       	ret

0000021c <__vector_13>:

#include "PWM1.h"

uint8_t listo_actualizar_pwm = 0;

ISR(TIMER1_OVF_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
	//Regresa a los 20ms
	listo_actualizar_pwm = 0;
 226:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <listo_actualizar_pwm>
}
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <setupPWM1>:


void setupPWM1(void){
	//Interrupciones
	TIMSK1 = 0;
 234:	ef e6       	ldi	r30, 0x6F	; 111
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	10 82       	st	Z, r1
	TIMSK1 = (1<<TOIE1); //Overflow
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
	
	//Top en ICR1
	ICR1H = (PWMTOP & 0xFF00) >> 8;
 23e:	8c e9       	ldi	r24, 0x9C	; 156
 240:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWMTOP & 0x00FF);
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//Inicializar servo al minimo
	OCR1AH = (SERVOMIN & 0xFF00) >> 8;
 24a:	97 e0       	ldi	r25, 0x07	; 7
 24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (SERVOMIN & 0x00FF);
 250:	8f ec       	ldi	r24, 0xCF	; 207
 252:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR1BH = (SERVOMIN & 0xFF00) >> 8;
 256:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
	OCR1BL = (SERVOMIN & 0x00FF);
 25a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//Forma, modo, prescaler
	TCCR1A = 0;
 25e:	a0 e8       	ldi	r26, 0x80	; 128
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	1c 92       	st	X, r1
	TCCR1B = 0;
 264:	e1 e8       	ldi	r30, 0x81	; 129
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); //A1 No inverted | B1 No inverted | Fast con ICR1 Top
 26a:	8c 91       	ld	r24, X
 26c:	82 6a       	ori	r24, 0xA2	; 162
 26e:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
 270:	80 81       	ld	r24, Z
 272:	8a 61       	ori	r24, 0x1A	; 26
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <actualizar_servo>:
			OCR1BL = (i & 0x00FF);
		}
	}
}

void actualizar_servo(uint8_t adchleido, uint8_t servo_a_modificar){
 278:	cf 93       	push	r28
 27a:	c6 2f       	mov	r28, r22
	//Conversión de lectura de ADC a pulso en PWM
	float razon = (float)adchleido/(float)256;
 27c:	68 2f       	mov	r22, r24
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 2f 02 	call	0x45e	; 0x45e <__floatunsisf>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e8       	ldi	r20, 0x80	; 128
 28e:	5b e3       	ldi	r21, 0x3B	; 59
 290:	0e 94 bd 02 	call	0x57a	; 0x57a <__mulsf3>
	razon = (((float)SERVOMAX - (float)SERVOMIN)*razon) + (float)SERVOMIN;
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	4a ef       	ldi	r20, 0xFA	; 250
 29a:	54 e4       	ldi	r21, 0x44	; 68
 29c:	0e 94 bd 02 	call	0x57a	; 0x57a <__mulsf3>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 ee       	ldi	r19, 0xE0	; 224
 2a4:	49 ef       	ldi	r20, 0xF9	; 249
 2a6:	54 e4       	ldi	r21, 0x44	; 68
 2a8:	0e 94 94 01 	call	0x328	; 0x328 <__addsf3>
	uint16_t valorservo = (uint16_t)razon;
 2ac:	0e 94 00 02 	call	0x400	; 0x400 <__fixunssfsi>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
	actualizar_pwm(valorservo, servo_a_modificar);
 2b4:	6c 2f       	mov	r22, r28
 2b6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <actualizar_pwm>
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <__vector_9>:
#include "PWManual.h"

uint8_t contador_pwm = 0;
uint8_t limite_contador = 0;

ISR(TIMER2_OVF_vect){
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
	//Cuando llega al tope pasan .5ms entonces se actualiza la señal en PD6
	//dependiendo de la comparación de contadores
	if (contador_pwm >= limite_contador){
 2cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <contador_pwm>
 2d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <limite_contador>
 2d4:	98 17       	cp	r25, r24
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <__vector_9+0x1e>
		PORTD = 0;
 2d8:	1b b8       	out	0x0b, r1	; 11
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__vector_9+0x22>
	}
	else{
		PORTD = 0b01000000;
 2dc:	80 e4       	ldi	r24, 0x40	; 64
 2de:	8b b9       	out	0x0b, r24	; 11
	}
	contador_pwm += 1;
 2e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <contador_pwm>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <contador_pwm>
	TCNT2 = TIMERLIMIT;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
}
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <setupTIMER2>:

void setupTIMER2(void){
	//Interrupciones
	TIMSK2 = 0;
 2fe:	e0 e7       	ldi	r30, 0x70	; 112
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	10 82       	st	Z, r1
	TIMSK2 = (1<<TOIE2); //Overflow
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 83       	st	Z, r24
	
	//Forma, modo, prescaler
	TCCR2A = 0;
 308:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 30c:	e1 eb       	ldi	r30, 0xB1	; 177
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	10 82       	st	Z, r1
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20); //Operación temporizador | Prescaler 1024 
 312:	80 81       	ld	r24, Z
 314:	87 60       	ori	r24, 0x07	; 7
 316:	80 83       	st	Z, r24
	
	//Inicial en el valor límite
	TCNT2 = TIMERLIMIT;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 31e:	08 95       	ret

00000320 <actualizar_counterlimit>:
}

void actualizar_counterlimit(uint8_t limiteadch){
	limite_contador = limiteadch;
 320:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <limite_contador>
 324:	08 95       	ret

00000326 <__subsf3>:
 326:	50 58       	subi	r21, 0x80	; 128

00000328 <__addsf3>:
 328:	bb 27       	eor	r27, r27
 32a:	aa 27       	eor	r26, r26
 32c:	0e 94 ab 01 	call	0x356	; 0x356 <__addsf3x>
 330:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_round>
 334:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_pscA>
 338:	38 f0       	brcs	.+14     	; 0x348 <__addsf3+0x20>
 33a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_pscB>
 33e:	20 f0       	brcs	.+8      	; 0x348 <__addsf3+0x20>
 340:	39 f4       	brne	.+14     	; 0x350 <__addsf3+0x28>
 342:	9f 3f       	cpi	r25, 0xFF	; 255
 344:	19 f4       	brne	.+6      	; 0x34c <__addsf3+0x24>
 346:	26 f4       	brtc	.+8      	; 0x350 <__addsf3+0x28>
 348:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_nan>
 34c:	0e f4       	brtc	.+2      	; 0x350 <__addsf3+0x28>
 34e:	e0 95       	com	r30
 350:	e7 fb       	bst	r30, 7
 352:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_inf>

00000356 <__addsf3x>:
 356:	e9 2f       	mov	r30, r25
 358:	0e 94 94 02 	call	0x528	; 0x528 <__fp_split3>
 35c:	58 f3       	brcs	.-42     	; 0x334 <__addsf3+0xc>
 35e:	ba 17       	cp	r27, r26
 360:	62 07       	cpc	r22, r18
 362:	73 07       	cpc	r23, r19
 364:	84 07       	cpc	r24, r20
 366:	95 07       	cpc	r25, r21
 368:	20 f0       	brcs	.+8      	; 0x372 <__addsf3x+0x1c>
 36a:	79 f4       	brne	.+30     	; 0x38a <__addsf3x+0x34>
 36c:	a6 f5       	brtc	.+104    	; 0x3d6 <__addsf3x+0x80>
 36e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_zero>
 372:	0e f4       	brtc	.+2      	; 0x376 <__addsf3x+0x20>
 374:	e0 95       	com	r30
 376:	0b 2e       	mov	r0, r27
 378:	ba 2f       	mov	r27, r26
 37a:	a0 2d       	mov	r26, r0
 37c:	0b 01       	movw	r0, r22
 37e:	b9 01       	movw	r22, r18
 380:	90 01       	movw	r18, r0
 382:	0c 01       	movw	r0, r24
 384:	ca 01       	movw	r24, r20
 386:	a0 01       	movw	r20, r0
 388:	11 24       	eor	r1, r1
 38a:	ff 27       	eor	r31, r31
 38c:	59 1b       	sub	r21, r25
 38e:	99 f0       	breq	.+38     	; 0x3b6 <__addsf3x+0x60>
 390:	59 3f       	cpi	r21, 0xF9	; 249
 392:	50 f4       	brcc	.+20     	; 0x3a8 <__addsf3x+0x52>
 394:	50 3e       	cpi	r21, 0xE0	; 224
 396:	68 f1       	brcs	.+90     	; 0x3f2 <__addsf3x+0x9c>
 398:	1a 16       	cp	r1, r26
 39a:	f0 40       	sbci	r31, 0x00	; 0
 39c:	a2 2f       	mov	r26, r18
 39e:	23 2f       	mov	r18, r19
 3a0:	34 2f       	mov	r19, r20
 3a2:	44 27       	eor	r20, r20
 3a4:	58 5f       	subi	r21, 0xF8	; 248
 3a6:	f3 cf       	rjmp	.-26     	; 0x38e <__addsf3x+0x38>
 3a8:	46 95       	lsr	r20
 3aa:	37 95       	ror	r19
 3ac:	27 95       	ror	r18
 3ae:	a7 95       	ror	r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	53 95       	inc	r21
 3b4:	c9 f7       	brne	.-14     	; 0x3a8 <__addsf3x+0x52>
 3b6:	7e f4       	brtc	.+30     	; 0x3d6 <__addsf3x+0x80>
 3b8:	1f 16       	cp	r1, r31
 3ba:	ba 0b       	sbc	r27, r26
 3bc:	62 0b       	sbc	r22, r18
 3be:	73 0b       	sbc	r23, r19
 3c0:	84 0b       	sbc	r24, r20
 3c2:	ba f0       	brmi	.+46     	; 0x3f2 <__addsf3x+0x9c>
 3c4:	91 50       	subi	r25, 0x01	; 1
 3c6:	a1 f0       	breq	.+40     	; 0x3f0 <__addsf3x+0x9a>
 3c8:	ff 0f       	add	r31, r31
 3ca:	bb 1f       	adc	r27, r27
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	c2 f7       	brpl	.-16     	; 0x3c4 <__addsf3x+0x6e>
 3d4:	0e c0       	rjmp	.+28     	; 0x3f2 <__addsf3x+0x9c>
 3d6:	ba 0f       	add	r27, r26
 3d8:	62 1f       	adc	r22, r18
 3da:	73 1f       	adc	r23, r19
 3dc:	84 1f       	adc	r24, r20
 3de:	48 f4       	brcc	.+18     	; 0x3f2 <__addsf3x+0x9c>
 3e0:	87 95       	ror	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b7 95       	ror	r27
 3e8:	f7 95       	ror	r31
 3ea:	9e 3f       	cpi	r25, 0xFE	; 254
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <__addsf3x+0x9a>
 3ee:	b0 cf       	rjmp	.-160    	; 0x350 <__addsf3+0x28>
 3f0:	93 95       	inc	r25
 3f2:	88 0f       	add	r24, r24
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__addsf3x+0xa2>
 3f6:	99 27       	eor	r25, r25
 3f8:	ee 0f       	add	r30, r30
 3fa:	97 95       	ror	r25
 3fc:	87 95       	ror	r24
 3fe:	08 95       	ret

00000400 <__fixunssfsi>:
 400:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_splitA>
 404:	88 f0       	brcs	.+34     	; 0x428 <__fixunssfsi+0x28>
 406:	9f 57       	subi	r25, 0x7F	; 127
 408:	98 f0       	brcs	.+38     	; 0x430 <__fixunssfsi+0x30>
 40a:	b9 2f       	mov	r27, r25
 40c:	99 27       	eor	r25, r25
 40e:	b7 51       	subi	r27, 0x17	; 23
 410:	b0 f0       	brcs	.+44     	; 0x43e <__fixunssfsi+0x3e>
 412:	e1 f0       	breq	.+56     	; 0x44c <__fixunssfsi+0x4c>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	1a f0       	brmi	.+6      	; 0x424 <__fixunssfsi+0x24>
 41e:	ba 95       	dec	r27
 420:	c9 f7       	brne	.-14     	; 0x414 <__fixunssfsi+0x14>
 422:	14 c0       	rjmp	.+40     	; 0x44c <__fixunssfsi+0x4c>
 424:	b1 30       	cpi	r27, 0x01	; 1
 426:	91 f0       	breq	.+36     	; 0x44c <__fixunssfsi+0x4c>
 428:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_zero>
 42c:	b1 e0       	ldi	r27, 0x01	; 1
 42e:	08 95       	ret
 430:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_zero>
 434:	67 2f       	mov	r22, r23
 436:	78 2f       	mov	r23, r24
 438:	88 27       	eor	r24, r24
 43a:	b8 5f       	subi	r27, 0xF8	; 248
 43c:	39 f0       	breq	.+14     	; 0x44c <__fixunssfsi+0x4c>
 43e:	b9 3f       	cpi	r27, 0xF9	; 249
 440:	cc f3       	brlt	.-14     	; 0x434 <__fixunssfsi+0x34>
 442:	86 95       	lsr	r24
 444:	77 95       	ror	r23
 446:	67 95       	ror	r22
 448:	b3 95       	inc	r27
 44a:	d9 f7       	brne	.-10     	; 0x442 <__fixunssfsi+0x42>
 44c:	3e f4       	brtc	.+14     	; 0x45c <__fixunssfsi+0x5c>
 44e:	90 95       	com	r25
 450:	80 95       	com	r24
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <__floatunsisf>:
 45e:	e8 94       	clt
 460:	09 c0       	rjmp	.+18     	; 0x474 <__floatsisf+0x12>

00000462 <__floatsisf>:
 462:	97 fb       	bst	r25, 7
 464:	3e f4       	brtc	.+14     	; 0x474 <__floatsisf+0x12>
 466:	90 95       	com	r25
 468:	80 95       	com	r24
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8f 4f       	sbci	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	99 23       	and	r25, r25
 476:	a9 f0       	breq	.+42     	; 0x4a2 <__floatsisf+0x40>
 478:	f9 2f       	mov	r31, r25
 47a:	96 e9       	ldi	r25, 0x96	; 150
 47c:	bb 27       	eor	r27, r27
 47e:	93 95       	inc	r25
 480:	f6 95       	lsr	r31
 482:	87 95       	ror	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b7 95       	ror	r27
 48a:	f1 11       	cpse	r31, r1
 48c:	f8 cf       	rjmp	.-16     	; 0x47e <__floatsisf+0x1c>
 48e:	fa f4       	brpl	.+62     	; 0x4ce <__floatsisf+0x6c>
 490:	bb 0f       	add	r27, r27
 492:	11 f4       	brne	.+4      	; 0x498 <__floatsisf+0x36>
 494:	60 ff       	sbrs	r22, 0
 496:	1b c0       	rjmp	.+54     	; 0x4ce <__floatsisf+0x6c>
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	16 c0       	rjmp	.+44     	; 0x4ce <__floatsisf+0x6c>
 4a2:	88 23       	and	r24, r24
 4a4:	11 f0       	breq	.+4      	; 0x4aa <__floatsisf+0x48>
 4a6:	96 e9       	ldi	r25, 0x96	; 150
 4a8:	11 c0       	rjmp	.+34     	; 0x4cc <__floatsisf+0x6a>
 4aa:	77 23       	and	r23, r23
 4ac:	21 f0       	breq	.+8      	; 0x4b6 <__floatsisf+0x54>
 4ae:	9e e8       	ldi	r25, 0x8E	; 142
 4b0:	87 2f       	mov	r24, r23
 4b2:	76 2f       	mov	r23, r22
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <__floatsisf+0x5e>
 4b6:	66 23       	and	r22, r22
 4b8:	71 f0       	breq	.+28     	; 0x4d6 <__floatsisf+0x74>
 4ba:	96 e8       	ldi	r25, 0x86	; 134
 4bc:	86 2f       	mov	r24, r22
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	2a f0       	brmi	.+10     	; 0x4ce <__floatsisf+0x6c>
 4c4:	9a 95       	dec	r25
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	da f7       	brpl	.-10     	; 0x4c4 <__floatsisf+0x62>
 4ce:	88 0f       	add	r24, r24
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	97 f9       	bld	r25, 7
 4d6:	08 95       	ret

000004d8 <__fp_inf>:
 4d8:	97 f9       	bld	r25, 7
 4da:	9f 67       	ori	r25, 0x7F	; 127
 4dc:	80 e8       	ldi	r24, 0x80	; 128
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	08 95       	ret

000004e4 <__fp_nan>:
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	08 95       	ret

000004ea <__fp_pscA>:
 4ea:	00 24       	eor	r0, r0
 4ec:	0a 94       	dec	r0
 4ee:	16 16       	cp	r1, r22
 4f0:	17 06       	cpc	r1, r23
 4f2:	18 06       	cpc	r1, r24
 4f4:	09 06       	cpc	r0, r25
 4f6:	08 95       	ret

000004f8 <__fp_pscB>:
 4f8:	00 24       	eor	r0, r0
 4fa:	0a 94       	dec	r0
 4fc:	12 16       	cp	r1, r18
 4fe:	13 06       	cpc	r1, r19
 500:	14 06       	cpc	r1, r20
 502:	05 06       	cpc	r0, r21
 504:	08 95       	ret

00000506 <__fp_round>:
 506:	09 2e       	mov	r0, r25
 508:	03 94       	inc	r0
 50a:	00 0c       	add	r0, r0
 50c:	11 f4       	brne	.+4      	; 0x512 <__fp_round+0xc>
 50e:	88 23       	and	r24, r24
 510:	52 f0       	brmi	.+20     	; 0x526 <__fp_round+0x20>
 512:	bb 0f       	add	r27, r27
 514:	40 f4       	brcc	.+16     	; 0x526 <__fp_round+0x20>
 516:	bf 2b       	or	r27, r31
 518:	11 f4       	brne	.+4      	; 0x51e <__fp_round+0x18>
 51a:	60 ff       	sbrs	r22, 0
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__fp_round+0x20>
 51e:	6f 5f       	subi	r22, 0xFF	; 255
 520:	7f 4f       	sbci	r23, 0xFF	; 255
 522:	8f 4f       	sbci	r24, 0xFF	; 255
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	08 95       	ret

00000528 <__fp_split3>:
 528:	57 fd       	sbrc	r21, 7
 52a:	90 58       	subi	r25, 0x80	; 128
 52c:	44 0f       	add	r20, r20
 52e:	55 1f       	adc	r21, r21
 530:	59 f0       	breq	.+22     	; 0x548 <__fp_splitA+0x10>
 532:	5f 3f       	cpi	r21, 0xFF	; 255
 534:	71 f0       	breq	.+28     	; 0x552 <__fp_splitA+0x1a>
 536:	47 95       	ror	r20

00000538 <__fp_splitA>:
 538:	88 0f       	add	r24, r24
 53a:	97 fb       	bst	r25, 7
 53c:	99 1f       	adc	r25, r25
 53e:	61 f0       	breq	.+24     	; 0x558 <__fp_splitA+0x20>
 540:	9f 3f       	cpi	r25, 0xFF	; 255
 542:	79 f0       	breq	.+30     	; 0x562 <__fp_splitA+0x2a>
 544:	87 95       	ror	r24
 546:	08 95       	ret
 548:	12 16       	cp	r1, r18
 54a:	13 06       	cpc	r1, r19
 54c:	14 06       	cpc	r1, r20
 54e:	55 1f       	adc	r21, r21
 550:	f2 cf       	rjmp	.-28     	; 0x536 <__fp_split3+0xe>
 552:	46 95       	lsr	r20
 554:	f1 df       	rcall	.-30     	; 0x538 <__fp_splitA>
 556:	08 c0       	rjmp	.+16     	; 0x568 <__fp_splitA+0x30>
 558:	16 16       	cp	r1, r22
 55a:	17 06       	cpc	r1, r23
 55c:	18 06       	cpc	r1, r24
 55e:	99 1f       	adc	r25, r25
 560:	f1 cf       	rjmp	.-30     	; 0x544 <__fp_splitA+0xc>
 562:	86 95       	lsr	r24
 564:	71 05       	cpc	r23, r1
 566:	61 05       	cpc	r22, r1
 568:	08 94       	sec
 56a:	08 95       	ret

0000056c <__fp_zero>:
 56c:	e8 94       	clt

0000056e <__fp_szero>:
 56e:	bb 27       	eor	r27, r27
 570:	66 27       	eor	r22, r22
 572:	77 27       	eor	r23, r23
 574:	cb 01       	movw	r24, r22
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <__mulsf3>:
 57a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__mulsf3x>
 57e:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_round>
 582:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_pscA>
 586:	38 f0       	brcs	.+14     	; 0x596 <__mulsf3+0x1c>
 588:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_pscB>
 58c:	20 f0       	brcs	.+8      	; 0x596 <__mulsf3+0x1c>
 58e:	95 23       	and	r25, r21
 590:	11 f0       	breq	.+4      	; 0x596 <__mulsf3+0x1c>
 592:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_inf>
 596:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_nan>
 59a:	11 24       	eor	r1, r1
 59c:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_szero>

000005a0 <__mulsf3x>:
 5a0:	0e 94 94 02 	call	0x528	; 0x528 <__fp_split3>
 5a4:	70 f3       	brcs	.-36     	; 0x582 <__mulsf3+0x8>

000005a6 <__mulsf3_pse>:
 5a6:	95 9f       	mul	r25, r21
 5a8:	c1 f3       	breq	.-16     	; 0x59a <__mulsf3+0x20>
 5aa:	95 0f       	add	r25, r21
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	55 1f       	adc	r21, r21
 5b0:	62 9f       	mul	r22, r18
 5b2:	f0 01       	movw	r30, r0
 5b4:	72 9f       	mul	r23, r18
 5b6:	bb 27       	eor	r27, r27
 5b8:	f0 0d       	add	r31, r0
 5ba:	b1 1d       	adc	r27, r1
 5bc:	63 9f       	mul	r22, r19
 5be:	aa 27       	eor	r26, r26
 5c0:	f0 0d       	add	r31, r0
 5c2:	b1 1d       	adc	r27, r1
 5c4:	aa 1f       	adc	r26, r26
 5c6:	64 9f       	mul	r22, r20
 5c8:	66 27       	eor	r22, r22
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	66 1f       	adc	r22, r22
 5d0:	82 9f       	mul	r24, r18
 5d2:	22 27       	eor	r18, r18
 5d4:	b0 0d       	add	r27, r0
 5d6:	a1 1d       	adc	r26, r1
 5d8:	62 1f       	adc	r22, r18
 5da:	73 9f       	mul	r23, r19
 5dc:	b0 0d       	add	r27, r0
 5de:	a1 1d       	adc	r26, r1
 5e0:	62 1f       	adc	r22, r18
 5e2:	83 9f       	mul	r24, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	22 1f       	adc	r18, r18
 5ea:	74 9f       	mul	r23, r20
 5ec:	33 27       	eor	r19, r19
 5ee:	a0 0d       	add	r26, r0
 5f0:	61 1d       	adc	r22, r1
 5f2:	23 1f       	adc	r18, r19
 5f4:	84 9f       	mul	r24, r20
 5f6:	60 0d       	add	r22, r0
 5f8:	21 1d       	adc	r18, r1
 5fa:	82 2f       	mov	r24, r18
 5fc:	76 2f       	mov	r23, r22
 5fe:	6a 2f       	mov	r22, r26
 600:	11 24       	eor	r1, r1
 602:	9f 57       	subi	r25, 0x7F	; 127
 604:	50 40       	sbci	r21, 0x00	; 0
 606:	9a f0       	brmi	.+38     	; 0x62e <__mulsf3_pse+0x88>
 608:	f1 f0       	breq	.+60     	; 0x646 <__mulsf3_pse+0xa0>
 60a:	88 23       	and	r24, r24
 60c:	4a f0       	brmi	.+18     	; 0x620 <__mulsf3_pse+0x7a>
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	bb 1f       	adc	r27, r27
 614:	66 1f       	adc	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	50 40       	sbci	r21, 0x00	; 0
 61e:	a9 f7       	brne	.-22     	; 0x60a <__mulsf3_pse+0x64>
 620:	9e 3f       	cpi	r25, 0xFE	; 254
 622:	51 05       	cpc	r21, r1
 624:	80 f0       	brcs	.+32     	; 0x646 <__mulsf3_pse+0xa0>
 626:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_inf>
 62a:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_szero>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	e4 f3       	brlt	.-8      	; 0x62a <__mulsf3_pse+0x84>
 632:	98 3e       	cpi	r25, 0xE8	; 232
 634:	d4 f3       	brlt	.-12     	; 0x62a <__mulsf3_pse+0x84>
 636:	86 95       	lsr	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f7 95       	ror	r31
 640:	e7 95       	ror	r30
 642:	9f 5f       	subi	r25, 0xFF	; 255
 644:	c1 f7       	brne	.-16     	; 0x636 <__mulsf3_pse+0x90>
 646:	fe 2b       	or	r31, r30
 648:	88 0f       	add	r24, r24
 64a:	91 1d       	adc	r25, r1
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
