
PWM Potenciometro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088b  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000755  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f2  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
void setupADC(void);

//INTERRUPCIONES

//ADC
ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	valoradc = ADCH; // Almacenar valor
  a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF); // Apagar bandera
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Volver a iniciar
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <setup>:
	//Entradas
	// No hay digitales, solo ADC
	
	//Salidas
	//PB1 va al Servo 1 (OC1A)
	DDRB = 0;
  c8:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB1);
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	08 95       	ret

000000d2 <setupADC>:
	//Otros servos
}

void setupADC(void){
	ADMUX = 0;
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //Vcc ref | Just. Izq. | Mux ADC7
  d8:	80 81       	ld	r24, Z
  da:	87 66       	ori	r24, 0x67	; 103
  dc:	80 83       	st	Z, r24
	ADCSRA = 0;
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Int. En | Presc. 128 (125kHz)
  e4:	80 81       	ld	r24, Z
  e6:	8f 60       	ori	r24, 0x0F	; 15
  e8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // Enable
  ea:	80 81       	ld	r24, Z
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <main>:
}

//PRINCIPAL
int main(void)
{
	cli();
  f2:	f8 94       	cli
	setup();
  f4:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
	setupADC();
  f8:	0e 94 69 00 	call	0xd2	; 0xd2 <setupADC>
	setupPWM1();
  fc:	0e 94 b3 00 	call	0x166	; 0x166 <setupPWM1>
	sei();
 100:	78 94       	sei
	
	actualizar_servo(0); //Primer inicio de Servo
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <actualizar_servo>
	ADCSRA |= (1<<ADSC); //Primer inicio de ADC
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24

	while (1)
	{
		actualizar_servo(valoradc);
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <actualizar_servo>
 11e:	fa cf       	rjmp	.-12     	; 0x114 <main+0x22>

00000120 <actualizar_pwm>:
	TCCR1A |= (1<<COM1A1) | (1<<WGM11); //A1 No inverted | Fast con ICR1 Top
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i){
	listo_actualizar_pwm = 1;
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <listo_actualizar_pwm>
	while (listo_actualizar_pwm != 0){
 126:	04 c0       	rjmp	.+8      	; 0x130 <actualizar_pwm+0x10>
		//El valor del pulso depende del leído en ADCH
		OCR1AH = (i & 0xFF00) >> 8;
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		OCR1AL = (i & 0x00FF);
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
}

static void actualizar_pwm(uint16_t i){
	listo_actualizar_pwm = 1;
	while (listo_actualizar_pwm != 0){
 130:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <listo_actualizar_pwm>
 134:	21 11       	cpse	r18, r1
 136:	f8 cf       	rjmp	.-16     	; 0x128 <actualizar_pwm+0x8>
		//El valor del pulso depende del leído en ADCH
		OCR1AH = (i & 0xFF00) >> 8;
		OCR1AL = (i & 0x00FF);
	}
}
 138:	08 95       	ret

0000013a <__vector_13>:

#include "PWM1.h"

uint8_t listo_actualizar_pwm = 0;

ISR(TIMER1_OVF_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
	//Regresa a los 20ms
	listo_actualizar_pwm = 0;
 144:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <listo_actualizar_pwm>
}
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
	//Probando si hace los ms necesarios
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <setupPWM1>:

void setupPWM1(void){
	//Interrupciones
	TIMSK1 = 0;
 166:	ef e6       	ldi	r30, 0x6F	; 111
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	10 82       	st	Z, r1
	TIMSK1 = (1<<OCIE1A) | (1<<TOIE1); //Compare A, Overflow
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	80 83       	st	Z, r24
	
	//Top en ICR1
	ICR1H = (PWMTOP & 0xFF00) >> 8;
 170:	8c e9       	ldi	r24, 0x9C	; 156
 172:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWMTOP & 0x00FF);
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//Inicializar servo al minimo
	OCR1AH = (SERVOMIN & 0xFF00) >> 8;
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (SERVOMIN & 0x00FF);
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//Forma, modo, prescaler
	TCCR1A = 0;
 188:	a0 e8       	ldi	r26, 0x80	; 128
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	1c 92       	st	X, r1
	TCCR1B = 0;
 18e:	e1 e8       	ldi	r30, 0x81	; 129
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) | (1<<WGM11); //A1 No inverted | Fast con ICR1 Top
 194:	8c 91       	ld	r24, X
 196:	82 68       	ori	r24, 0x82	; 130
 198:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //Fast con ICR1 Top | Prescaler 8 
 19a:	80 81       	ld	r24, Z
 19c:	8a 61       	ori	r24, 0x1A	; 26
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <actualizar_servo>:
	}
}

void actualizar_servo(uint16_t adchleido){
	//Conversión de lectura de ADC a pulso en PWM
	float razon = (float)adchleido/(float)256;
 1a2:	bc 01       	movw	r22, r24
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 8a 01 	call	0x314	; 0x314 <__floatunsisf>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	40 e8       	ldi	r20, 0x80	; 128
 1b2:	5b e3       	ldi	r21, 0x3B	; 59
 1b4:	0e 94 18 02 	call	0x430	; 0x430 <__mulsf3>
	razon = (((float)SERVOMAX - (float)SERVOMIN)*razon) + (float)SERVOMIN;
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	4a ef       	ldi	r20, 0xFA	; 250
 1be:	54 e4       	ldi	r21, 0x44	; 68
 1c0:	0e 94 18 02 	call	0x430	; 0x430 <__mulsf3>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 ee       	ldi	r19, 0xE0	; 224
 1c8:	49 ef       	ldi	r20, 0xF9	; 249
 1ca:	54 e4       	ldi	r21, 0x44	; 68
 1cc:	0e 94 ef 00 	call	0x1de	; 0x1de <__addsf3>
	uint16_t valorservo = (uint16_t)razon;
 1d0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__fixunssfsi>
	actualizar_pwm(valorservo);
 1d4:	cb 01       	movw	r24, r22
 1d6:	0e 94 90 00 	call	0x120	; 0x120 <actualizar_pwm>
 1da:	08 95       	ret

000001dc <__subsf3>:
 1dc:	50 58       	subi	r21, 0x80	; 128

000001de <__addsf3>:
 1de:	bb 27       	eor	r27, r27
 1e0:	aa 27       	eor	r26, r26
 1e2:	0e 94 06 01 	call	0x20c	; 0x20c <__addsf3x>
 1e6:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_round>
 1ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_pscA>
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <__addsf3+0x20>
 1f0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fp_pscB>
 1f4:	20 f0       	brcs	.+8      	; 0x1fe <__addsf3+0x20>
 1f6:	39 f4       	brne	.+14     	; 0x206 <__addsf3+0x28>
 1f8:	9f 3f       	cpi	r25, 0xFF	; 255
 1fa:	19 f4       	brne	.+6      	; 0x202 <__addsf3+0x24>
 1fc:	26 f4       	brtc	.+8      	; 0x206 <__addsf3+0x28>
 1fe:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_nan>
 202:	0e f4       	brtc	.+2      	; 0x206 <__addsf3+0x28>
 204:	e0 95       	com	r30
 206:	e7 fb       	bst	r30, 7
 208:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_inf>

0000020c <__addsf3x>:
 20c:	e9 2f       	mov	r30, r25
 20e:	0e 94 ef 01 	call	0x3de	; 0x3de <__fp_split3>
 212:	58 f3       	brcs	.-42     	; 0x1ea <__addsf3+0xc>
 214:	ba 17       	cp	r27, r26
 216:	62 07       	cpc	r22, r18
 218:	73 07       	cpc	r23, r19
 21a:	84 07       	cpc	r24, r20
 21c:	95 07       	cpc	r25, r21
 21e:	20 f0       	brcs	.+8      	; 0x228 <__addsf3x+0x1c>
 220:	79 f4       	brne	.+30     	; 0x240 <__addsf3x+0x34>
 222:	a6 f5       	brtc	.+104    	; 0x28c <__addsf3x+0x80>
 224:	0c 94 11 02 	jmp	0x422	; 0x422 <__fp_zero>
 228:	0e f4       	brtc	.+2      	; 0x22c <__addsf3x+0x20>
 22a:	e0 95       	com	r30
 22c:	0b 2e       	mov	r0, r27
 22e:	ba 2f       	mov	r27, r26
 230:	a0 2d       	mov	r26, r0
 232:	0b 01       	movw	r0, r22
 234:	b9 01       	movw	r22, r18
 236:	90 01       	movw	r18, r0
 238:	0c 01       	movw	r0, r24
 23a:	ca 01       	movw	r24, r20
 23c:	a0 01       	movw	r20, r0
 23e:	11 24       	eor	r1, r1
 240:	ff 27       	eor	r31, r31
 242:	59 1b       	sub	r21, r25
 244:	99 f0       	breq	.+38     	; 0x26c <__addsf3x+0x60>
 246:	59 3f       	cpi	r21, 0xF9	; 249
 248:	50 f4       	brcc	.+20     	; 0x25e <__addsf3x+0x52>
 24a:	50 3e       	cpi	r21, 0xE0	; 224
 24c:	68 f1       	brcs	.+90     	; 0x2a8 <__addsf3x+0x9c>
 24e:	1a 16       	cp	r1, r26
 250:	f0 40       	sbci	r31, 0x00	; 0
 252:	a2 2f       	mov	r26, r18
 254:	23 2f       	mov	r18, r19
 256:	34 2f       	mov	r19, r20
 258:	44 27       	eor	r20, r20
 25a:	58 5f       	subi	r21, 0xF8	; 248
 25c:	f3 cf       	rjmp	.-26     	; 0x244 <__addsf3x+0x38>
 25e:	46 95       	lsr	r20
 260:	37 95       	ror	r19
 262:	27 95       	ror	r18
 264:	a7 95       	ror	r26
 266:	f0 40       	sbci	r31, 0x00	; 0
 268:	53 95       	inc	r21
 26a:	c9 f7       	brne	.-14     	; 0x25e <__addsf3x+0x52>
 26c:	7e f4       	brtc	.+30     	; 0x28c <__addsf3x+0x80>
 26e:	1f 16       	cp	r1, r31
 270:	ba 0b       	sbc	r27, r26
 272:	62 0b       	sbc	r22, r18
 274:	73 0b       	sbc	r23, r19
 276:	84 0b       	sbc	r24, r20
 278:	ba f0       	brmi	.+46     	; 0x2a8 <__addsf3x+0x9c>
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	a1 f0       	breq	.+40     	; 0x2a6 <__addsf3x+0x9a>
 27e:	ff 0f       	add	r31, r31
 280:	bb 1f       	adc	r27, r27
 282:	66 1f       	adc	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	88 1f       	adc	r24, r24
 288:	c2 f7       	brpl	.-16     	; 0x27a <__addsf3x+0x6e>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <__addsf3x+0x9c>
 28c:	ba 0f       	add	r27, r26
 28e:	62 1f       	adc	r22, r18
 290:	73 1f       	adc	r23, r19
 292:	84 1f       	adc	r24, r20
 294:	48 f4       	brcc	.+18     	; 0x2a8 <__addsf3x+0x9c>
 296:	87 95       	ror	r24
 298:	77 95       	ror	r23
 29a:	67 95       	ror	r22
 29c:	b7 95       	ror	r27
 29e:	f7 95       	ror	r31
 2a0:	9e 3f       	cpi	r25, 0xFE	; 254
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <__addsf3x+0x9a>
 2a4:	b0 cf       	rjmp	.-160    	; 0x206 <__addsf3+0x28>
 2a6:	93 95       	inc	r25
 2a8:	88 0f       	add	r24, r24
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <__addsf3x+0xa2>
 2ac:	99 27       	eor	r25, r25
 2ae:	ee 0f       	add	r30, r30
 2b0:	97 95       	ror	r25
 2b2:	87 95       	ror	r24
 2b4:	08 95       	ret

000002b6 <__fixunssfsi>:
 2b6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__fp_splitA>
 2ba:	88 f0       	brcs	.+34     	; 0x2de <__fixunssfsi+0x28>
 2bc:	9f 57       	subi	r25, 0x7F	; 127
 2be:	98 f0       	brcs	.+38     	; 0x2e6 <__fixunssfsi+0x30>
 2c0:	b9 2f       	mov	r27, r25
 2c2:	99 27       	eor	r25, r25
 2c4:	b7 51       	subi	r27, 0x17	; 23
 2c6:	b0 f0       	brcs	.+44     	; 0x2f4 <__fixunssfsi+0x3e>
 2c8:	e1 f0       	breq	.+56     	; 0x302 <__fixunssfsi+0x4c>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	1a f0       	brmi	.+6      	; 0x2da <__fixunssfsi+0x24>
 2d4:	ba 95       	dec	r27
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <__fixunssfsi+0x14>
 2d8:	14 c0       	rjmp	.+40     	; 0x302 <__fixunssfsi+0x4c>
 2da:	b1 30       	cpi	r27, 0x01	; 1
 2dc:	91 f0       	breq	.+36     	; 0x302 <__fixunssfsi+0x4c>
 2de:	0e 94 11 02 	call	0x422	; 0x422 <__fp_zero>
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	08 95       	ret
 2e6:	0c 94 11 02 	jmp	0x422	; 0x422 <__fp_zero>
 2ea:	67 2f       	mov	r22, r23
 2ec:	78 2f       	mov	r23, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	b8 5f       	subi	r27, 0xF8	; 248
 2f2:	39 f0       	breq	.+14     	; 0x302 <__fixunssfsi+0x4c>
 2f4:	b9 3f       	cpi	r27, 0xF9	; 249
 2f6:	cc f3       	brlt	.-14     	; 0x2ea <__fixunssfsi+0x34>
 2f8:	86 95       	lsr	r24
 2fa:	77 95       	ror	r23
 2fc:	67 95       	ror	r22
 2fe:	b3 95       	inc	r27
 300:	d9 f7       	brne	.-10     	; 0x2f8 <__fixunssfsi+0x42>
 302:	3e f4       	brtc	.+14     	; 0x312 <__fixunssfsi+0x5c>
 304:	90 95       	com	r25
 306:	80 95       	com	r24
 308:	70 95       	com	r23
 30a:	61 95       	neg	r22
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	8f 4f       	sbci	r24, 0xFF	; 255
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	08 95       	ret

00000314 <__floatunsisf>:
 314:	e8 94       	clt
 316:	09 c0       	rjmp	.+18     	; 0x32a <__floatsisf+0x12>

00000318 <__floatsisf>:
 318:	97 fb       	bst	r25, 7
 31a:	3e f4       	brtc	.+14     	; 0x32a <__floatsisf+0x12>
 31c:	90 95       	com	r25
 31e:	80 95       	com	r24
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	99 23       	and	r25, r25
 32c:	a9 f0       	breq	.+42     	; 0x358 <__floatsisf+0x40>
 32e:	f9 2f       	mov	r31, r25
 330:	96 e9       	ldi	r25, 0x96	; 150
 332:	bb 27       	eor	r27, r27
 334:	93 95       	inc	r25
 336:	f6 95       	lsr	r31
 338:	87 95       	ror	r24
 33a:	77 95       	ror	r23
 33c:	67 95       	ror	r22
 33e:	b7 95       	ror	r27
 340:	f1 11       	cpse	r31, r1
 342:	f8 cf       	rjmp	.-16     	; 0x334 <__floatsisf+0x1c>
 344:	fa f4       	brpl	.+62     	; 0x384 <__floatsisf+0x6c>
 346:	bb 0f       	add	r27, r27
 348:	11 f4       	brne	.+4      	; 0x34e <__floatsisf+0x36>
 34a:	60 ff       	sbrs	r22, 0
 34c:	1b c0       	rjmp	.+54     	; 0x384 <__floatsisf+0x6c>
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	16 c0       	rjmp	.+44     	; 0x384 <__floatsisf+0x6c>
 358:	88 23       	and	r24, r24
 35a:	11 f0       	breq	.+4      	; 0x360 <__floatsisf+0x48>
 35c:	96 e9       	ldi	r25, 0x96	; 150
 35e:	11 c0       	rjmp	.+34     	; 0x382 <__floatsisf+0x6a>
 360:	77 23       	and	r23, r23
 362:	21 f0       	breq	.+8      	; 0x36c <__floatsisf+0x54>
 364:	9e e8       	ldi	r25, 0x8E	; 142
 366:	87 2f       	mov	r24, r23
 368:	76 2f       	mov	r23, r22
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__floatsisf+0x5e>
 36c:	66 23       	and	r22, r22
 36e:	71 f0       	breq	.+28     	; 0x38c <__floatsisf+0x74>
 370:	96 e8       	ldi	r25, 0x86	; 134
 372:	86 2f       	mov	r24, r22
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	2a f0       	brmi	.+10     	; 0x384 <__floatsisf+0x6c>
 37a:	9a 95       	dec	r25
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	88 1f       	adc	r24, r24
 382:	da f7       	brpl	.-10     	; 0x37a <__floatsisf+0x62>
 384:	88 0f       	add	r24, r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	97 f9       	bld	r25, 7
 38c:	08 95       	ret

0000038e <__fp_inf>:
 38e:	97 f9       	bld	r25, 7
 390:	9f 67       	ori	r25, 0x7F	; 127
 392:	80 e8       	ldi	r24, 0x80	; 128
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	08 95       	ret

0000039a <__fp_nan>:
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	80 ec       	ldi	r24, 0xC0	; 192
 39e:	08 95       	ret

000003a0 <__fp_pscA>:
 3a0:	00 24       	eor	r0, r0
 3a2:	0a 94       	dec	r0
 3a4:	16 16       	cp	r1, r22
 3a6:	17 06       	cpc	r1, r23
 3a8:	18 06       	cpc	r1, r24
 3aa:	09 06       	cpc	r0, r25
 3ac:	08 95       	ret

000003ae <__fp_pscB>:
 3ae:	00 24       	eor	r0, r0
 3b0:	0a 94       	dec	r0
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	05 06       	cpc	r0, r21
 3ba:	08 95       	ret

000003bc <__fp_round>:
 3bc:	09 2e       	mov	r0, r25
 3be:	03 94       	inc	r0
 3c0:	00 0c       	add	r0, r0
 3c2:	11 f4       	brne	.+4      	; 0x3c8 <__fp_round+0xc>
 3c4:	88 23       	and	r24, r24
 3c6:	52 f0       	brmi	.+20     	; 0x3dc <__fp_round+0x20>
 3c8:	bb 0f       	add	r27, r27
 3ca:	40 f4       	brcc	.+16     	; 0x3dc <__fp_round+0x20>
 3cc:	bf 2b       	or	r27, r31
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__fp_round+0x18>
 3d0:	60 ff       	sbrs	r22, 0
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__fp_round+0x20>
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__fp_split3>:
 3de:	57 fd       	sbrc	r21, 7
 3e0:	90 58       	subi	r25, 0x80	; 128
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	59 f0       	breq	.+22     	; 0x3fe <__fp_splitA+0x10>
 3e8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ea:	71 f0       	breq	.+28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ec:	47 95       	ror	r20

000003ee <__fp_splitA>:
 3ee:	88 0f       	add	r24, r24
 3f0:	97 fb       	bst	r25, 7
 3f2:	99 1f       	adc	r25, r25
 3f4:	61 f0       	breq	.+24     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f6:	9f 3f       	cpi	r25, 0xFF	; 255
 3f8:	79 f0       	breq	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3fa:	87 95       	ror	r24
 3fc:	08 95       	ret
 3fe:	12 16       	cp	r1, r18
 400:	13 06       	cpc	r1, r19
 402:	14 06       	cpc	r1, r20
 404:	55 1f       	adc	r21, r21
 406:	f2 cf       	rjmp	.-28     	; 0x3ec <__fp_split3+0xe>
 408:	46 95       	lsr	r20
 40a:	f1 df       	rcall	.-30     	; 0x3ee <__fp_splitA>
 40c:	08 c0       	rjmp	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 40e:	16 16       	cp	r1, r22
 410:	17 06       	cpc	r1, r23
 412:	18 06       	cpc	r1, r24
 414:	99 1f       	adc	r25, r25
 416:	f1 cf       	rjmp	.-30     	; 0x3fa <__fp_splitA+0xc>
 418:	86 95       	lsr	r24
 41a:	71 05       	cpc	r23, r1
 41c:	61 05       	cpc	r22, r1
 41e:	08 94       	sec
 420:	08 95       	ret

00000422 <__fp_zero>:
 422:	e8 94       	clt

00000424 <__fp_szero>:
 424:	bb 27       	eor	r27, r27
 426:	66 27       	eor	r22, r22
 428:	77 27       	eor	r23, r23
 42a:	cb 01       	movw	r24, r22
 42c:	97 f9       	bld	r25, 7
 42e:	08 95       	ret

00000430 <__mulsf3>:
 430:	0e 94 2b 02 	call	0x456	; 0x456 <__mulsf3x>
 434:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_round>
 438:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_pscA>
 43c:	38 f0       	brcs	.+14     	; 0x44c <__mulsf3+0x1c>
 43e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fp_pscB>
 442:	20 f0       	brcs	.+8      	; 0x44c <__mulsf3+0x1c>
 444:	95 23       	and	r25, r21
 446:	11 f0       	breq	.+4      	; 0x44c <__mulsf3+0x1c>
 448:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_inf>
 44c:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_nan>
 450:	11 24       	eor	r1, r1
 452:	0c 94 12 02 	jmp	0x424	; 0x424 <__fp_szero>

00000456 <__mulsf3x>:
 456:	0e 94 ef 01 	call	0x3de	; 0x3de <__fp_split3>
 45a:	70 f3       	brcs	.-36     	; 0x438 <__mulsf3+0x8>

0000045c <__mulsf3_pse>:
 45c:	95 9f       	mul	r25, r21
 45e:	c1 f3       	breq	.-16     	; 0x450 <__mulsf3+0x20>
 460:	95 0f       	add	r25, r21
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	55 1f       	adc	r21, r21
 466:	62 9f       	mul	r22, r18
 468:	f0 01       	movw	r30, r0
 46a:	72 9f       	mul	r23, r18
 46c:	bb 27       	eor	r27, r27
 46e:	f0 0d       	add	r31, r0
 470:	b1 1d       	adc	r27, r1
 472:	63 9f       	mul	r22, r19
 474:	aa 27       	eor	r26, r26
 476:	f0 0d       	add	r31, r0
 478:	b1 1d       	adc	r27, r1
 47a:	aa 1f       	adc	r26, r26
 47c:	64 9f       	mul	r22, r20
 47e:	66 27       	eor	r22, r22
 480:	b0 0d       	add	r27, r0
 482:	a1 1d       	adc	r26, r1
 484:	66 1f       	adc	r22, r22
 486:	82 9f       	mul	r24, r18
 488:	22 27       	eor	r18, r18
 48a:	b0 0d       	add	r27, r0
 48c:	a1 1d       	adc	r26, r1
 48e:	62 1f       	adc	r22, r18
 490:	73 9f       	mul	r23, r19
 492:	b0 0d       	add	r27, r0
 494:	a1 1d       	adc	r26, r1
 496:	62 1f       	adc	r22, r18
 498:	83 9f       	mul	r24, r19
 49a:	a0 0d       	add	r26, r0
 49c:	61 1d       	adc	r22, r1
 49e:	22 1f       	adc	r18, r18
 4a0:	74 9f       	mul	r23, r20
 4a2:	33 27       	eor	r19, r19
 4a4:	a0 0d       	add	r26, r0
 4a6:	61 1d       	adc	r22, r1
 4a8:	23 1f       	adc	r18, r19
 4aa:	84 9f       	mul	r24, r20
 4ac:	60 0d       	add	r22, r0
 4ae:	21 1d       	adc	r18, r1
 4b0:	82 2f       	mov	r24, r18
 4b2:	76 2f       	mov	r23, r22
 4b4:	6a 2f       	mov	r22, r26
 4b6:	11 24       	eor	r1, r1
 4b8:	9f 57       	subi	r25, 0x7F	; 127
 4ba:	50 40       	sbci	r21, 0x00	; 0
 4bc:	9a f0       	brmi	.+38     	; 0x4e4 <__mulsf3_pse+0x88>
 4be:	f1 f0       	breq	.+60     	; 0x4fc <__mulsf3_pse+0xa0>
 4c0:	88 23       	and	r24, r24
 4c2:	4a f0       	brmi	.+18     	; 0x4d6 <__mulsf3_pse+0x7a>
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	bb 1f       	adc	r27, r27
 4ca:	66 1f       	adc	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	91 50       	subi	r25, 0x01	; 1
 4d2:	50 40       	sbci	r21, 0x00	; 0
 4d4:	a9 f7       	brne	.-22     	; 0x4c0 <__mulsf3_pse+0x64>
 4d6:	9e 3f       	cpi	r25, 0xFE	; 254
 4d8:	51 05       	cpc	r21, r1
 4da:	80 f0       	brcs	.+32     	; 0x4fc <__mulsf3_pse+0xa0>
 4dc:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_inf>
 4e0:	0c 94 12 02 	jmp	0x424	; 0x424 <__fp_szero>
 4e4:	5f 3f       	cpi	r21, 0xFF	; 255
 4e6:	e4 f3       	brlt	.-8      	; 0x4e0 <__mulsf3_pse+0x84>
 4e8:	98 3e       	cpi	r25, 0xE8	; 232
 4ea:	d4 f3       	brlt	.-12     	; 0x4e0 <__mulsf3_pse+0x84>
 4ec:	86 95       	lsr	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f7 95       	ror	r31
 4f6:	e7 95       	ror	r30
 4f8:	9f 5f       	subi	r25, 0xFF	; 255
 4fa:	c1 f7       	brne	.-16     	; 0x4ec <__mulsf3_pse+0x90>
 4fc:	fe 2b       	or	r31, r30
 4fe:	88 0f       	add	r24, r24
 500:	91 1d       	adc	r25, r1
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
